version: '3.8'

networks:
  kafka-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net

  spark:
    image: bitnami/spark:3.4.1
    container_name: flight-data-pipeline-spark
    depends_on:
      - postgres  # ğŸ‘ˆ ADD THIS
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "4040:4040"
    volumes:
      - ./spark-app:/opt/bitnami/spark-app
      - ./postgresql-42.7.3.jar:/opt/bitnami/spark/jars/postgresql-42.7.3.jar  # âœ… This maps your spark-app folder
    networks:
      - kafka-net

  flight-producer:
    image: python:3.11-slim
    depends_on:
      - kafka
    environment:
      - KAFKA_TOPIC=flights
      - KAFKA_SERVER=kafka:29092
      - FLIGHT_API=https://opensky-network.org/api/states/all
    volumes:
      - ./flight_producer.py:/app/flight_producer.py  # âœ… This maps your producer file
    working_dir: /app
    command: >
      sh -c "pip install kafka-python requests python-dotenv && 
             sleep 30 &&
             python flight_producer.py"
    networks:
      - kafka-net
    restart: on-failure
    
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: flights
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kafka-net

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - "8090:8088"
    environment:
      SUPERSET_SECRET_KEY: flightdata123
      PYTHONPATH: /app/superset_home
    depends_on:
      - postgres
    networks:
      - kafka-net
    volumes:
      - ./superset:/app/superset_home
    command: >
      sh -c "
        pip install psycopg2-binary &&
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Admin --lastname User --email admin@superset.com --password admin &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debug
      "
volumes:
  postgres_data: